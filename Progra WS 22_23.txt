1
(b) [4 Punkte]
Gegeben sei Folgende Klasse:

Person.java

public class Person{
    private String name;

    public Person(String name) {
        this.name = name;
    }

    @Override
    public toString() {
        return name;
    }
}

Employee.java
public class Employee extends person {
    privat integer salary;

    public Employee(String name, int salary) {
        super(name);
        this.salary = salary;
    }

    @Override
    public String toString() {
        return super.toString() + ", " + salary;
    }
}}

Beim Compilieren der Klasse gibt es folgende Fehlermeldung:

Person.java:9: error: invalid methode declaration; retruns type required 
    public toString() {

Person.java:12: error: class, interface or num expected
    }}

Employee.java:2: error: cannot find Symbol
    private integer salary;

    Symbol: class integer
    location class Employee

Person.java:8: error: annotation type not applicable to this kind of declaration
    @Override

Person.java:10: error: incompatible types: unexpected return value
    retrun name:

5 errors
    

Geben sie an in welchen Zeilen die Ursachen für die Felder sind, beschreiben Sie die Fehler jeweils kurz (max. 1 Satz) und geben Sie die 
korrigierte Codezeile vollständig an, sodass der Code das tut, was bei der Programmierung wahrscheinlich vorgesehen war. Geben sie keine
Folgefehler an, die durch Korrektur eines vorherrigen Fehlers behoben werden.

Zeilennumer:Person, 9
Fehlerbeschreibung:Es fehlt das "String" vor dem toString
Korrektur:public String toString() {

Zeilennumer:Person, 12
Fehlerbeschreibung:Eine schweifende klammer zu viel in zeile 12
Korrektur:}

Zeilennumer:Employee, 2
Fehlerbeschreibung:es muss int statt integer heisen
Korrektur:public int slaray; 

Zeilennumer:
Fehlerbeschreibung:
Korrektur:


(c) [2 Punkte]
Sie haben eine Reihe von ganzzahligen Messwerten Zeilenweise in einer Textdatei /projekt/werte.txt gespeichert; ungültige Messerte sind als
-1 gespeichert. Außerdem haben Sie ein java Programm *Filter*, das zeilenweise Integer einliest und alle Integer, die nicht -1 sind, wieder
zeilenweise ausgibt.

/projekt % ls
Filter.class Filter.java werte.txt
/projekt %

Geben sie einen Befehl an, mit dem sie alle gültigen Messerte aus *werte.txt* in einer Datei *bereinigt.txt* speichern können:


Aufgabe 2
Formen sie die Kontrollstrukturen in den folgenden Codeauschnitten um, sodass sich die Semantik des Codes nicht ändert. Benutzen sie in
ihren Code jeweils nur die von der Aufgabe vorgegebene Art von Kontrollstrukturen.

(a) [2 Punkte] Formen sie die folgende for-each-Schleife in eine for-Schleife um:
Vorgabe
String[] namen = {"Alice", "Bob", "Charlie"};
int index = 0;
for (String name: namen) {
    System.out.print(index + ": " + name);
    index++
}

Ihre Lösung
String[] namen = {"Alice", "Bob", "Charlie"};
for(int index = 0; i < namen.length; i++) {
    System.out.print(i + ": " + namen[i]);
}




(b) [3 Punkte] Formen sie die folgende switch-Verzweigung in eine if-Verzweigung um:
Vorgabe
int choice = 1;
switch (choice){
    case 1;
    case 3;
        System.out.print("Feuer");
        break;
    case 2;
        System.out.print("Luft");
        break;
    default;
        System.out.print("ungültig");
}
Ihre Lösung
int choice = 1;
if(choice == 1 || choice == 3) {
    System.out.print("Feuer");
}else if (choice == 2) {
    System.out.print("Luft");
}else {
    System.out.print("ungültig")
}

Aufgabe 3

Zweirpotzenzen leeren	 2^0,2^1 etc..
Schreibe ein Java Programm Binner, das eine ganze zahl x als Konsolenarument entgegennimmt und die zweierpotenzen von 2^0 bis 2^x als ganze
Zahlen auf der Standardausgabe ausgibt. Die ausgabe soll die Form  2^5^= 32 haben (siehe Beispiel). falls kein Argument oder keine ganze 
zahl übergeben wird, soll sich das Program mit der Ausgabe err beenden.
Zur Erinnerung: Die Parse-Methoden werfen im Fehlerfall eine NumberFormatException. math.pow(a, b) berechnet a^b und gibt einen Double zu-
ück.

Beispiel-Aufrufe
% java Binner 4
2^0 = 1
2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
% java Binner -3
% java Binner 
err
% java Binner zwei
err

Binner.java

public class Binner {
    public static void main(String[] args) {

        if(args.length == 0) {
            System.out.print("err");
            return;
        }

        int zahl;
        try{
            zahl = Integer.parseInt(args[0]);
        }catch(NumberFormatException exception) {
            System.out.print("err");
            retrun;
        }

        for(int exponent = 0; exponent <= zahl; exponent++) {
            int wert = (int) (Math.pow(2, exponent));
            System.out.print("2^" + exponent + "= " + wert);
        }

    }
}



Aufgabe 3
(a) [1 Punkt]
Gegeben sei der reguläre Ausdruck [ABCD][0-9]+. Kreuzen sie alle Strings an, die vollständig von diesem Ausdruck gematcht werden.

[]a0
[x]A4
[x]B10
[]A-4
[]G7
[]5G

(b) [1 Punkt]
Der oben ausgegebene Ausdruck ist gleichbedeutend mit:
[][A-Z0-9] + [A-Z]
[][a-z0-9] *
[][a-z0-9] * [a-z]
[][a-z0-9] [a-z0-9] * [a-z]


Aufgabe 6
Aus der Vorlesung kennen sie folgende Implementierung vo Insertion Sort die ein Array von Integern aufsteigend sortiert

public static void sort (int[] numbers) {
    for(int currentIndex = 0; currentIndex < numbers.length; currentIndex++) {
        int currentNumber = numbers[currentIndex];
        while(insertionPosition > 0 && numbers[insertionPosition - 1] > currentNumber){
            numbers[insertionPosition] = numbers[insertionPosition - 1];
            insertionPosition--;
        }
        numbers[insertionPosition] = currentNumber;
    }
}

Gegeben sei die folgende Klasse:
Studi.java
public class Studi {
    private final String name;
    private final double schnitt;

    public Studu(String name, double notendurschnitt) {
        this.name = name;
        this.schnitt = notendurschnitt;
    }

    public double getSchnitt() {
        return schnitt;
    }

    public double getName() {
        return name;
    }
}

(a) [6 Punkte]
Vervollständigen sie die Klassen methode nachNote, die ein Array von Studi-Objekten übergeben bekommt und ein neues Array zurückgeben soll,
in dem die selben objekte aufsteigend nach ihrer Durchschnittsnote sortiert sind (beste(also kleinste) note am anfang); die Reihenfolge der 
Objekte im übergebenden Array soll dabei von der methode nicht verändert werden, das original array und das sortierte array sollen die sel-
ben objekte im heap refferenzieren.
Falls der methode null übergeben wird, soll eine IllegalArgumentException gworfen werden. Sie dürfen davon ausgehen, dass kein Wert im über-
gebenden array null ist.

Studi.java (Fortsetung)

public static ___Studi[]____ nachNote (Studi[] studisOrig) {
    if(studiOrig == null) {
        ______throw new IllegalArgumentException()______;
    }
    __Studi[]__ studis = new Studi ___[studisOrig.length]___;
    for(int i = 0; i < studis.length; i++) {
        ____studis[i] = studisOrig[i]____;
    }
    for(int i = __1__; i < studis.length; i++) {
        ___studi: cs = studis[i]___;
        int einfPos = 1;
        while(einfPos > 0 && _____studis[einfPos - 1].schnitt > cs.schnitt)____ {
            ____Studis[einfPos] = studis[einfPos - 1]____;
            einfPos--
        }
        ____studis[einfPos] = cs ____;
    }
    ____return studis__;
}


Ergänzen sie die klasse Auflistung um folgende private, statische methoden. Sie dürfen immer davon ausgehen, dass kein Array und kein
array und kein array-wert null sind.

(b) [7 Punkte]
Studi[] zugelassen (Studi[]) gibt ein neues Studi array zurück, das nur genau die Studi-Objekte aus dem übergebenden Array entält, deren
Durchschnittsnoten kleiner als 3.0 ist.

(c) [4 Punkte]
String[] namen(Studi[]): Gibt die namen aller Studi-Objekte im übergebenden Array zurück (lässt Rheienfolge unverändert).

(d) [3 Punkte]
void ausgeben (String[]): Gibt die übergebenden Strings auf der Standardausgabe aus (lässt Rheienfolge unverändert).

(e) [4 Punkte]
Vervollständigen sie die main Methode, sodass die Namen aller bereits angelegten Studis mit einer Durchschnittsnote kleiner 3.0 ausgegeben
werden, wobei die Studis aufsteigend nach Durchschnittsnote sortiert sind. Sie müssen dabei alle in dieser Aufgabe geschriebenden Methoden
verwenden, vergessen sie nicht, dass nachnote in einer anderen klasse steht. Der Code muss auch dann korrekt funktionieren, wenn die 
Eigenschaften der drei vorgegebenden Objekte anders wären.

Auflistung.java
public class Auflistung {
    private static Studi[] zugelassen(Studi[] studis) {
        int s =0;
        For(Studi studi: studis) {
            if(studi.getSchnitt() < 3.0) {
                s++;
            }
        }
        Studi[] sts = new Studi[s];
        int i = =,
        For(Studi studi: studis) {
            if(studi.getSchnitt() < 3.0) {
                sts[i] = studi;
                i++;
            }
        }
        return sts;

    }
    private static String[] namen (Studi[] sts) {
        String n = new String[sts.length];
        for (int i= 0; i < sts.length; i++) {
            n[i] = sts[i].getName();

        }
    }
    private static void ausgeben(String[] sts) {
        for(String s: sts) {
            System.out.print(s);
        }
    }

    public static void main(String[] args) {
    Studi kim = new Studi ("Kim", 2.5);
    Studi marlin = new Studi ("marlin", 3.3);
    Studi sasha = new Studi ("sasha", 1.4);

    studi sts[] = {kim, marlin, sasha};


    ausgeben(namen(zugelassen(Studi.nachNote(sts))));
}
}


Aufgabe 7
Gegeben sei die folgende Klasse List, die eine einfach verkettete Liste implemetiert, in der Doubles gespeichert werden können:

List.java
public class List {
    private class Node {
        private double data;
        private Node next;

        private Node(double data, Node next) {
            this.data = data;
            this.next = next;
        }
    }
    private Node head;

    public List(double[]  initialValues) {
        for(int i = initialValues.length - 1; i >= 0; i--) {
            head = new Node(initialValues[i], head);
        }
    }

    public String toString() {
        // ...(nicht abgedruckt)
    }

    public void removeNegative() {
        Node current = head;
        while(current != null) {
            while(current.next != null && current.next.data < 0) {
                current.next = current.next.next;
            }
            current = current.next;
        }
    }
}

Die Methode void removeNegative() soll alle doubles aud der Liste entfernen, die kleiner als 0 sind. Die methode funktioniert aber nicht
richtig; beim folgenden Testaufruf gibt es eine unerwartete ausgabe.

Test.java
public class Test {
    public static void main(String[] args) {
        double[] listElemente = {-5.3, -2, 5, 3, -3.3, -2.2};
        List list = new List(listElemente);
        System.out.println(list); // erwartet -5.3, -2.0, 5.0, 3.0, -3.3, -2.2,
        list.removeNegative();
        System.out.println(list); // erwartet 5.0, 3.0
    }
}

% java Test 
-5.5, -2.0, 5.0, 3.0, -3.3, -2.2,
-5.3, 5.0, 3.0,

Geben sie eine korrigierte Implementierung der Methodean , alternativ können sie auch eindeutig beschreiben, wie die Fehlerhafte Implemen-
tierung korrigiert werden kann.

Ihre Lösung
public void removeNegative() {
    bei einfügen:

    while(head != null && head.data < 0) {
        head = head.next;

    }


}

(b) [3 Punkte]
Wie wollen in einer Datenstruktur speichern, welche Matrikelnummern sich für den Studiengang Informatik angemeldet haben; die anzahl der 
Matrikelnummern ist vorab nicht bekannt, die gespeicherte Rheienfolge ist egal. Später wollen wir sehr oft überprüfen, ob eine Matrikel-
nummer in der Datenstruktur vorhanden ist. Troy schlägt vor ein Hashset zu benutzen. Gabi meint es sollte lieber ein Array benutzt werden.


(i)
Würden sie eher den Vorschlag von Troy oder den von Gabi umsetzen? Geben sie einen nachvollziehbaren Grund in 1-3 ausformulierten Sätzen an.

Antwort:
Ich würde auf Troy hören, da das nachkucken schneller geht als im Array, ab einer bestimmten größe, und Array speichert eine Rheienfolge ab
die wird garnicht brauchen und die Anzahl nicht vorher bekannt ist.

Angenommen sie wollen eine einfach verkettete Liste in einer java Anwendung verwenden.Warum ist es sinnvoller die JDK Klasse java.util.Lin-
kedList<E> zu verwenden, anstatt eine Liste selbst zu implementieren? Geben sie einen nachvollziehbaren Grund in 1-3 ausformulierten Sätzen.

Antwort:

Es ist sinnvoller die JDK Klasse zu nutzen, weil sie schon besser getestet sind und zeit sparen und sie kompatibeln sind mit restlichen
Biblioteken.



Aufgabe 8
Gegeben sei die Klasse Tree für einen binären Suchbaum, in dem Doubles gespeichert werden können:

Tree.java
public class Tree {
    private class BinaryNode {
        private double element;
        private BinaryNode left, right;

        private BinaryNode (double element) {
            this.element = element;
        }
    }

    private BinaryNode root;

    //fügt newNumber in den Baum ein
    public void insert (double newNumber) {
        // (Implementierung nicht abgedruckt)
    }
}

Vervollständigen die die Methode int countLarge(), die die Anzahl aller Einträge im Baum zurückgibt, die größer oder gleich 100 sind;
bei einem leeren Suchbaum ist diese Summe gleich 0. Nutzen sie in ihrem code Eigenschafften eines binären Suchbaumes aus, um die Anzahl der
betrachteten Knoten minimal zu halten. Sie dürfen zusätzliche Hilfsmethoden mit minimaler Sichtbarkeit schreiben.

Tree.java (Fortsetung)
public int countLarge() {
    return countLarge(root);
}
private int countLarge(BinaryRoot root) {
    if(root == null) {
        return 0;
    }
    if(root.element >= 100) {
        return 1+ countLarge(root.left) + countLarge(root.right);
    }
    retrun countLarge(root.right);
}



Aufgabe 8
In dieser Aufgabe sollen sie Klassen und Methoden für ein Versand von Briefen und Paketen zwischen verschiedenen Standorten eines Unterneh-
mens programmieren. 

Hinweise:
-Sie dürfen alle Variablennamen frei wählen.
-Alle Instanzvariablen müssen privat sein
-Wählen sie Sinnvolle Datentypen für ihre Variable.
-Wenn kein Konstruktorverhalten vorgechrieben ist, reicht der default-Konstruktor.
-Das genaue format der Textausgaben ist ihne überlassen.
-Innerhalb dieseer Aufgaben müssen sie keine Exception abfangen. Sie müssen keine Parameter vallidieren.
-Lesen sie sich die aufgabe stelleung vor Beginn der Implementierung vollständig durch, um einen besser überblick über das Gesamtbild zu
erhalten
-Gehen sie davon aus, dass alle in dieser Aufgabe gennatnten Klassen im selben Package liegen


Gegeben ist das Interface Sendable, das eine einzele Sendung beschreibt.

Sendable.java
public interface Sendable {
    // gibt den Absende-Standort zurück
    Location senderLocation();
    // gibt den Empfang-Standort zurück
    Location receiverLocation();
    // gibt das Gewicht einer Sendung in gramm (g) zurück
    double weight;
}

                                                    Sendable
                            Location        Letter              Parcel      Delivery



(a) [4 Punkte] 
Vervollständigen sie die Klasse Location, die einen Standort Punktleitzahl (ganzeZahl) und Lnd (Text) repräsentiert. Der öffentliche Kon-
struktor Location(int, String) bekommt diese beiden Information übergeben und speichert sie in Instanzvariablen ab. Schreiben sie öffent-
liche Methoden getCountry() und getPostCode(), die das Lnad bzw. die Postleitzahl zurücggeben. 

Location.java

public class Location{
    private int postleitzahl;
    private String land;
    
    public Location(int postleitzahl, String land) {
        this.postleitzahl = postleitzahl;
        this.land = land;
    }

    public String getCountry() {
        retrun land;
    }

    public int getPostCode() {
        retrunn postleitzahl;
    }
}

(b) [6 Punkte]

Schreiben sie eine nicht abstarkte, öffentliche Klasse Letter, die das Sendable Interface sinnvoll implemetiert. Der öffentliche Konstruk-
tor nimmt Absender und Empfänger-Standort in von Form von Location-Objekten entgegen. Jeder Brief wiegt 80g.

Letter.java

public class Letter Implements Sendable {
    private Location receiver;
    private Location sendungen;

    public Letter(Location receiver, Location sendungen) {
        this.receiver = receiver;
        this.sendungen = sendungen;
    }

    public double weight() {
        retrun 80;
    }

    public Location receiverLocation() {
        retrun receiver;
    }

    public Location sendungenLocation() {
        return sendungen;
    }
}

(c) [6 Punkte] 
Schreiben sie eine nicht abstrakte, öffentliche Klasse Parcel, die als Sendable-Interface sinnvoll implementiert. Der öffentliche Konstruk-
tor nimtt das Gewicht, den Standort und den Empfänger Standort (Location) entgegen.

Parcel.java

public class Parcel implemets Sendable{
    private Location sendungen;
    private Location receiver;
    private double weight;

    public Parcel(Location sendungen, Location receiver, double weight) {
        this.sendungen = sendungen;
        this.receiver = receiver;
        this.weight = weight;
    }

    public double weight() {
        retrun weight;
    }

    public Location senderLocation() {
        retrun sendungen;
    }

    public Location receiverLocation(){
        return receiver;
    }
}




(d) [10 Punkte]

Vervollständigen sie die Klasse Delivery, die eine Lieferung bestehend aus einer oder mehreren Sendungen repräsentiert. Ein Delivery-Ob-
jekt, speichert dazu ein Array von Sendable-Instanzen. Es gibt zwei öffentliche Konstruktoren, über die die Sendungen der lieferung gesetzt
werden.

-Delivery(Sendable[]) nimmt ein Array von Sendungen entgegen
-Delivery(Sendable) nimmt eine einzelne Sendung entgegen.

Schenken sie eine private, statische Methode int postage(Sendable), die die Portokosten einer einzelnen Sendung in euro berechnet.

-Sendunge unter 100g: 1€
-Sendungen >= 100g: 2€
-Sendungen, bei denen Empfangs- und Absende-Land unterschiedlich sind, zusätzlich 1€.

Schreiben sie eine öffentliche Instanzenmethode int postage(), die das Gesamtporto für die Sendungen der Lieferung zurückgibt.

Delivery.java

public class Delivery {
    private Sendable [] = sds;

    public Delivery(Sendable[] sds) {
        this.sds = sds
    }

    public Delivery(Sendable sendungen) {
        sds = new Sendable[]{s};
    }

    private static int postage(Sendable sendungen) {
        int preis = 0;

        if(sendungen.weight >= 0) {
            preis = 2
        }else{
            preis = 1
        }

        if(!sendungen.receiverLocation.getCountry).equals(sendungen.senderLocation.getCountry)){
            retrun preis + 1;
        }
        retrun preis;
    }
    public int postage() {
        int sendungen = 0;
        for( Sendable s1: sds) {
            s += postage(s1);
        }
        retrun s;
    }
}


(e) [2 Punkte]

Ergänzen sie die main Methode der Klasse DispatchOffice, sodass eine Lieferung bestehend aus dem angelegten Letter-Objekt erstellt wird,
und das Gesamtporto mithilfe der Delivery-Instanz berechnet und angegeben wird.

DispatchOffice.java

public class DispatchOffice {
    public static void main (String[] args) {
        
        Letter letter = new Letter (new Location(40225, "Germany"),
                                    new Location (40530, "Sweden")),

        Delivery delivery = __new delivery(letter)________;

        System.out.println(___delivery.postage()______);
    }
}












































